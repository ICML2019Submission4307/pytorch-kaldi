[cfg_proto]
cfg_proto = proto/global.proto
cfg_proto_chunk = proto/global_chunk.proto

[exp]
cmd = 
run_nn_script = run_nn.py
out_folder = exp/TEDLIUM_LSTM_fmllr_512c_uni_2l_hcgs_75d32b_50d4b_quant6b
seed = 2234
use_cuda = True
multi_gpu = False
save_gpumem = False
n_epochs_tr = 4

[dataset1]
data_name = TEDLIUM_tr
fea = fea_name=fmllr
	fea_lst=/home/dkadetot/kaldi/egs/tedlium/s5/data-fmllr-tri3/train/feats.scp
	fea_opts=apply-cmvn --utt2spk=ark:/home/dkadetot/kaldi/egs/tedlium/s5/data-fmllr-tri3/train/utt2spk  ark:/home/dkadetot/kaldi/egs/tedlium/s5/data-fmllr-tri3/train/_fmllr/cmvn_train.ark ark:- ark:- | add-deltas --delta-order=0 ark:- ark:- |
	cw_left=5
	cw_right=5
lab = lab_name=lab_cd
	lab_folder=/home/dkadetot/kaldi/egs/tedlium/s5/exp/dnn4_pretrain-dbn_dnn_ali
	lab_opts=ali-to-pdf
	lab_count_file=auto
	lab_data_folder=/home/dkadetot/kaldi/egs/tedlium/s5/data/train/
	lab_graph=/home/dkadetot/kaldi/egs/tedlium/s5/exp/tri3/graph
n_chunks = 10

[dataset2]
data_name = TEDLIUM_dev
fea = fea_name=fmllr
	fea_lst=/home/dkadetot/kaldi/egs/tedlium/s5/data-fmllr-tri3/dev/feats.scp
	fea_opts=apply-cmvn --utt2spk=ark:/home/dkadetot/kaldi/egs/tedlium/s5/data-fmllr-tri3/dev/utt2spk  ark:/home/dkadetot/kaldi/egs/tedlium/s5/data-fmllr-tri3/dev/_fmllr/cmvn_dev.ark ark:- ark:- | add-deltas --delta-order=0 ark:- ark:- |
	cw_left=5
	cw_right=5
lab = lab_name=lab_cd
	lab_folder=/home/dkadetot/kaldi/egs/tedlium/s5/exp/dnn4_pretrain-dbn_dnn_ali_dev
	lab_opts=ali-to-pdf
	lab_count_file=auto
	lab_data_folder=/home/dkadetot/kaldi/egs/tedlium/s5/data/dev/
	lab_graph=/home/dkadetot/kaldi/egs/tedlium/s5/exp/tri3/graph
n_chunks = 1

[dataset3]
data_name = TEDLIUM_test
fea = fea_name=fmllr
	fea_lst=/home/dkadetot/kaldi/egs/tedlium/s5/data-fmllr-tri3/test/feats.scp
	fea_opts=apply-cmvn --utt2spk=ark:/home/dkadetot/kaldi/egs/tedlium/s5/data-fmllr-tri3/test/utt2spk  ark:/home/dkadetot/kaldi/egs/tedlium/s5/data-fmllr-tri3/test/_fmllr/cmvn_test.ark ark:- ark:- | add-deltas --delta-order=0 ark:- ark:- |
	cw_left=5
	cw_right=5
lab = lab_name=lab_cd
	lab_folder=/home/dkadetot/kaldi/egs/tedlium/s5/exp/dnn4_pretrain-dbn_dnn_ali_test
	lab_opts=ali-to-pdf
	lab_count_file=auto
	lab_data_folder=/home/dkadetot/kaldi/egs/tedlium/s5/data/test/
	lab_graph=/home/dkadetot/kaldi/egs/tedlium/s5/exp/tri3/graph
n_chunks = 1

[data_use]
train_with = TEDLIUM_tr
valid_with = TEDLIUM_dev
forward_with = TEDLIUM_test

[batches]
batch_size_train = 16
max_seq_length_train = 50
increase_seq_length_train = True
start_seq_len_train = 20
multply_factor_seq_len_train = 2
batch_size_valid = 8
max_seq_length_valid = 1000

[architecture1]
arch_name = LSTM_cudnn_layers
arch_proto = proto/LSTM.proto
arch_library = neural_networks
arch_class = LSTM
arch_pretrain_file = none
arch_freeze = False
arch_seq_model = True
lstm_lay = 512,512,512
lstm_drop = 0.0,0.0,0.0
lstm_quant = True
param_quant = 6,6,6
lstm_use_laynorm_inp = False
lstm_use_batchnorm_inp = False
lstm_use_laynorm = False,False,False
lstm_use_batchnorm = True,True,True
lstm_bidir = False
lstm_act = tanh,tanh,tanh
lstm_orthinit = True
arch_lr = 0.0016
arch_halving_factor = 0.5
arch_improvement_threshold = 0.001
arch_opt = rmsprop
opt_momentum = 0.0
opt_alpha = 0.95
opt_eps = 1e-8
opt_centered = False
opt_weight_decay = 0.0
out_folder = 
lstm_hcgs = True
hcgsx_block = 32,4
hcgsx_drop = 75,50
hcgsh_block = 32,4
hcgsh_drop = 75,50

[architecture2]
arch_name = MLP_layers
arch_proto = proto/MLP.proto
arch_library = neural_networks
arch_class = MLP
arch_pretrain_file = none
arch_freeze = False
arch_seq_model = False
dnn_lay = N_out_lab_cd
dnn_drop = 0.0
mlp_quant = True
param_quant = 6
dnn_use_laynorm_inp = False
dnn_use_batchnorm_inp = False
dnn_use_batchnorm = False
dnn_use_laynorm = False
dnn_act = softmax
arch_lr = 0.0016
arch_halving_factor = 0.5
arch_improvement_threshold = 0.001
arch_opt = rmsprop
opt_momentum = 0.0
opt_alpha = 0.95
opt_eps = 1e-8
opt_centered = False
opt_weight_decay = 0.0
out_folder = 
mlp_hcgs = True
hcgs_block = 64,4
hcgs_drop = 50,50

[model]
model_proto = proto/model.proto
model = out_dnn1=compute(LSTM_cudnn_layers,fmllr)
	out_dnn2=compute(MLP_layers,out_dnn1)
	loss_final=cost_nll(out_dnn2,lab_cd)
	err_final=cost_err(out_dnn2,lab_cd)

[forward]
forward_out = out_dnn2
normalize_posteriors = True
normalize_with_counts_from = lab_cd
save_out_file = True
require_decoding = True

[decoding]
decoding_script_folder = kaldi_decoding_scripts/
decoding_script = decode_dnn.sh
decoding_proto = proto/decoding.proto
min_active = 200
max_active = 7000
max_mem = 50000000
beam = 13.0
latbeam = 8.0
acwt = 0.10
max_arcs = -1
skip_scoring = false
scoring_script = /home/dkadetot/kaldi/egs/tedlium/s5/local/score.sh
scoring_opts = "--min-lmwt 1 --max-lmwt 10"
norm_vars = False

